function Insurance(e,t,s){this.brand=e,this.year=t,this.type=s}function UI(){}Insurance.prototype.calculateCost=function(){let e;switch(this.brand){case"1":e=2300;break;case"2":e=2100;break;case"3":e=2700}return e-=3*((new Date).getFullYear()-this.year)*e/100,"basico"===this.type?e*=1.3:"completo"===this.type&&(e*=1.5),e},UI.prototype.fillOptions=()=>{const e=document.querySelector("#year"),t=(new Date).getFullYear(),s=t-20;for(let o=t;o>=s;o--){const t=document.createElement("option");t.value=o,t.textContent=o,e.appendChild(t)}},UI.prototype.showMessages=(e,t)=>{const s=document.querySelector(".alert--"+t);if(s)return void(s.textContent=e);const o=document.createElement("div");"error"===t?o.classList.add("alert","alert--error"):o.classList.add("alert","alert--success"),o.classList.add("message"),o.textContent=e;document.querySelector("#quotation-results").appendChild(o),setTimeout(()=>{o.remove()},3e3)},UI.prototype.showResults=(e,t)=>{const{brand:s,year:o,type:n}=e;switch(s){case"1":brandText="Americano";break;case"2":brandText="Asiático";break;case"3":brandText="Europeo"}switch(n){case"basic":typeText="Básico";break;case"complete":typeText="Completo"}const a=document.createElement("div");a.classList.add("result"),a.innerHTML=`\n    <h3 class="result__heading">Resultado de tu cotización</h3>\n    <ul class="result__list">\n      <li class="result__item"><span>Tipo de marca: </span> ${brandText}</li>\n      <li class="result__item"><span>Año de fabricación: </span> ${o}</li>\n      <li class="result__item"><span>Tipo de seguro: </span> ${typeText}</li>\n      <li class="result__item"><span>Total: </span> ${t}</li>\n    </ul>\n  `;const r=document.querySelector("#quotation-results"),c=document.querySelector("#loader");c.classList.add("loader--active"),setTimeout(()=>{for(c.classList.remove("loader--active");r.firstChild;)r.removeChild(r.firstChild);r.appendChild(a)},3e3)};const ui=new UI;function events(){document.querySelector("#quote-form").addEventListener("submit",quoteInsurance)}function quoteInsurance(e){e.preventDefault();const t=document.querySelector("#brand").value,s=document.querySelector("#year").value,o=document.querySelector('input[name="type"]:checked').value;if(""===t||""===s||""===o)return void ui.showMessages("Por favor, complete todos los campos","error");ui.showMessages("Cargando...","success");const n=document.querySelector("#quotation-results .result");null!=n&&n.remove();const a=new Insurance(t,s,o),r=a.calculateCost();ui.showResults(a,r)}document.addEventListener("DOMContentLoaded",()=>{ui.fillOptions()}),events();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
